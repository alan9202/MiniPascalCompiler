/* ---------------Seccion de Importacion y Empaquetamiento--------------------*/
package gramaticapascal;
/*
    Import the class java_cup.runtime.*
*/
import java_cup.runtime.*;
import java.io.FileReader;

/* ---------------Seccion de Codigo de Usuario--------------------*/

/*
    Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores.
*/
parser code {:

    /*
        Reporte de error encontrado.
    */
    public void report_error(String message, Object info) {
        StringBuilder sb = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                sb.append(" in line "+(s.left+1));
                if (s.right >= 0) {
                    sb.append(", column "+(s.right+1));
                }
            }
        }
        sb.append(" : "+message);
        System.err.println(sb);
    }

    /*
        Cuando se encuentra un error donde el sistema no puede recuperarse, se lanza un error fatal. Se despliega el mensaje de error y se finaliza la ejecucion.
    */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /*
        Metodo main para garantizar la ejecucion del analizador lexico y sintactico, ademas que se pase como parametro la tabla de simbolos correspondiente.
    */
    public static void main(String[] args) {
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(new AnalizadorLexicografico( new FileReader(args[0])));
            Object result = asin.parse().value;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

/* ------------Declaracion de Simbolos Terminales y No Terminales---------- */

/*
    Terminales (tokens obtenidos por el analizador lexico).
    Terminales que no tienen un valor son listados primero, los terminales que tienen un valor como los enteros son listados en la segunda o demas lineas.
*/
terminal            PROCEDURE, IS, INTEGER, TWOP, SEMI, BEGIN, END, EQUAL, FOR, IN, TO, LOOP, ENDLOOP,
                    IF, THEN, ELSE, ENDIF, INPUT, OUTPUT, PIZQ, PDER, NULL, OP_ADD, OP_SUB,
                    OP_MULT, OP_DIV, DIGITO, IDENTIFIER;

/*
    No terminales usados en la seccion gramatical.
    Primero se lista los no terminales que tienen un valor Object y despues se lista los no terminales que tienen un entero.
    Un Object se refiere a que no tienen tipo, pudiendo ser entero o String.
*/
non terminal Object     program, header, body, block, statements, statement, declarations,
                        assigment_statement, for_statement, if_statement, input_statement,
                        output_statement, null_statement, add_op, mult_op, identifier,
                        expression, constant, termn, factor, digit;


/* -------------Seccion de Predencia y Asociatividad----------- */

/*
    Precedencia de los no terminales, no sirve con simbolos terminales.
    Por eso no la usamos.
    Adem√°s indica si se asocia a izquierda o derecha.
*/

/* ------------------- Seccion de la Gramatica ------------------------ */

program                 ::= PROCEDURE header body;
header                  ::= identifier IS;
body                    ::= declarations block;
declarations            ::= identifier TWOP INTEGER SEMI |
                            identifier TWOP INTEGER SEMI declarations;
block                   ::= BEGIN statements END SEMI;
statements              ::= statement |
                            statement statements;
statement               ::= assigment_statement |
                            null_statement      |
                            for_statement       |
                            if_statement        |
                            input_statement     |
                            output_statement;
assigment_statement     ::= identifier : id EQUAL expression : ex SEMI
                            {:
                                Util.localHeap(String.valueOf(id), String.valueOf(ex));
                            :};
if_statement            ::= IF expression: ex THEN
                                statements: s
                            ELSE
                                statements: s
                            ENDIF
                            {:
                              RESULT = s;
                            :};
for_statement           ::= FOR identifier: id IN constant: cons1 TO constant: cons2
                            LOOP
                                statements: s
                            ENDLOOP
                            {:
                            :};
input_statement         ::= INPUT PIZQ identifier: id PDER SEMI
                            {:
                                Util.read(String.valueOf(id));
                            :};
output_statement        ::= OUTPUT PIZQ identifier : id PDER SEMI
                            {:
                                Util.print(String.valueOf(id));
                            :};
null_statement          ::= NULL SEMI;
expression              ::= termn : t
                            {:
                                RESULT = t;
                            :} |
                            add_op : add
                            {:
                                RESULT = add;
                            :};
termn                   ::= factor : f
                            {:
                                RESULT = f;
                            :} |
                            mult_op : mult
                            {:
                                RESULT = mult;
                            :};
factor                  ::= identifier : id
                            {:
                                RESULT = id;
                            :} |
                            PIZQ expression : ex PDER
                            {:
                                RESULT = ex;
                            :}|
                            constant : c
                            {:
                                RESULT = c;
                            :};
identifier              ::= IDENTIFIER : id
                            {:
                                RESULT = id;
                            :};
add_op                  ::= expression : ex OP_ADD termn : t
                            {:
                                RESULT = Util.operation(String.valueOf(ex), String.valueOf(t), OperationType.ADD);
                            :} |
                            expression : ex OP_SUB termn : t
                            {:
                                RESULT = Util.operation(String.valueOf(ex), String.valueOf(t), OperationType.SUB);
                            :};
mult_op                 ::= termn : t OP_MULT factor : f
                            {:
                                RESULT = Util.operation(String.valueOf(t), String.valueOf(f), OperationType.MULT);
                            :} |
                            termn : t OP_DIV factor : f
                            {:
                                RESULT = Util.operation(String.valueOf(t), String.valueOf(f), OperationType.DIV);
                            :};
constant                ::= DIGITO : d
                            {:
                                RESULT = d;
                            :};
